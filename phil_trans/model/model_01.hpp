
// Code generated by stanc f556d0df
#include <stan/model/model_header.hpp>
namespace model_01_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 127, column 2 to column 46)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 128, column 2 to column 38)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 129, column 2 to column 19)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 130, column 2 to column 19)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 131, column 2 to column 19)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 132, column 2 to column 31)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 133, column 2 to column 38)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 134, column 2 to column 41)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 135, column 2 to column 54)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 136, column 2 to column 43)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 139, column 2 to column 39)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 140, column 2 to column 32)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 141, column 2 to column 33)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 142, column 2 to column 32)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 143, column 2 to column 10)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 144, column 2 to column 13)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 145, column 2 to column 13)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 146, column 2 to column 18)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 147, column 2 to column 21)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 148, column 2 to column 42)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 149, column 2 to column 16)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 150, column 2 to column 17)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 151, column 2 to column 17)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 152, column 2 to column 17)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 153, column 2 to column 17)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 154, column 2 to column 17)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 155, column 2 to column 17)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 156, column 2 to column 16)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 157, column 2 to column 29)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 158, column 2 to column 25)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 159, column 2 to column 46)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 160, column 2 to column 28)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 162, column 2 to column 65)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 163, column 2 to column 96)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 164, column 2 to column 96)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 165, column 2 to column 102)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 166, column 2 to column 102)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 167, column 2 to column 25)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 168, column 2 to column 25)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 169, column 2 to column 25)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 170, column 2 to column 35)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 171, column 2 to column 24)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 172, column 2 to line 173, column 39)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 174, column 2 to column 14)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 175, column 2 to column 17)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 176, column 2 to column 17)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 177, column 2 to column 43)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 178, column 2 to column 49)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 181, column 4 to column 35)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 182, column 4 to column 40)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 183, column 4 to column 56)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 184, column 4 to column 35)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 185, column 4 to column 38)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 186, column 4 to column 38)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 187, column 4 to column 38)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 189, column 4 to column 125)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 180, column 2 to line 190, column 3)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 192, column 2 to column 67)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 193, column 2 to column 68)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 194, column 2 to column 68)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 195, column 2 to column 68)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 196, column 2 to column 68)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 197, column 2 to column 68)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 198, column 2 to column 68)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 199, column 2 to column 67)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 201, column 2 to column 57)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 202, column 2 to column 53)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 204, column 2 to column 80)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 207, column 4 to line 208, column 97)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 206, column 23 to line 209, column 3)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 206, column 2 to line 209, column 3)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 211, column 2 to column 39)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 214, column 4 to line 216, column 21)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 213, column 38 to line 217, column 3)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 213, column 2 to line 217, column 3)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 238, column 2 to column 26)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 240, column 2 to column 73)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 242, column 2 to column 90)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 244, column 2 to column 35)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 245, column 2 to column 39)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 248, column 4 to column 88)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 247, column 31 to line 249, column 3)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 247, column 2 to line 249, column 3)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 252, column 4 to column 100)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 251, column 32 to line 253, column 3)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 251, column 2 to line 253, column 3)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 221, column 2 to column 40)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 222, column 2 to column 40)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 223, column 2 to column 27)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 224, column 2 to column 48)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 225, column 2 to column 31)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 226, column 2 to column 31)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 227, column 2 to column 31)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 228, column 2 to column 27)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 229, column 2 to column 41)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 230, column 2 to column 44)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 231, column 2 to column 33)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 232, column 2 to column 64)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 234, column 2 to column 112)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 235, column 2 to column 130)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 95, column 2 to column 20)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 96, column 2 to column 29)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 97, column 2 to column 43)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 98, column 2 to column 44)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 99, column 2 to column 38)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 100, column 2 to column 60)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 101, column 2 to column 61)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 102, column 2 to column 17)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 103, column 2 to column 16)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 104, column 2 to column 32)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 105, column 2 to column 27)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 106, column 2 to column 29)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 107, column 2 to column 28)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 108, column 2 to column 37)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 109, column 2 to column 32)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 110, column 2 to column 31)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 111, column 2 to column 43)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 112, column 2 to column 23)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 113, column 2 to column 35)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 114, column 2 to column 26)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 115, column 2 to column 40)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 118, column 2 to column 20)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 119, column 2 to column 23)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 120, column 2 to column 20)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 121, column 2 to column 23)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 122, column 2 to column 21)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 123, column 2 to column 23)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 124, column 2 to column 19)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 9, column 4 to column 28)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 10, column 4 to column 40)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 11, column 4 to column 43)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 14, column 4 to column 65)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 15, column 4 to column 82)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 16, column 4 to column 51)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 19, column 4 to column 60)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 20, column 4 to column 76)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 21, column 4 to column 40)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 22, column 4 to column 43)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 23, column 4 to column 43)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 24, column 4 to column 43)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 27, column 4 to column 22)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 28, column 4 to column 23)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 29, column 4 to column 23)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 30, column 4 to column 23)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 31, column 4 to column 23)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 32, column 4 to column 23)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 33, column 4 to column 23)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 34, column 4 to column 22)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 36, column 4 to column 24)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 37, column 4 to column 24)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 38, column 4 to column 24)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 39, column 4 to column 30)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 40, column 4 to column 30)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 41, column 4 to column 30)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 42, column 4 to column 30)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 44, column 4 to column 15)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 45, column 4 to column 16)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 46, column 4 to column 16)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 47, column 4 to column 16)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 48, column 4 to column 16)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 49, column 4 to column 16)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 50, column 4 to column 16)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 51, column 4 to column 15)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 55, column 8 to column 74)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 56, column 8 to column 59)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 54, column 59 to line 57, column 7)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 54, column 6 to line 57, column 7)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 53, column 31 to line 58, column 5)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 53, column 4 to line 58, column 5)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 60, column 4 to column 28)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 61, column 4 to column 35)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 62, column 4 to column 25)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 63, column 4 to column 28)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 64, column 4 to column 31)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 65, column 4 to column 39)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 66, column 4 to column 31)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 67, column 4 to column 20)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 69, column 4 to column 74)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 6, column 38 to line 70, column 3)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 73, column 4 to column 11)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 74, column 4 to column 55)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 75, column 4 to column 47)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 76, column 4 to column 34)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 77, column 4 to column 57)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 79, column 4 to column 32)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 80, column 4 to column 111)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 81, column 4 to column 33)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 82, column 4 to column 200)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 85, column 6 to column 40)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 86, column 6 to column 111)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 87, column 6 to column 27)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 88, column 6 to column 220)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 84, column 34 to line 89, column 5)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 84, column 4 to line 89, column 5)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 91, column 4 to column 26)",
                                                      " (in '/mnt/data2/users/bighyp/us_states/src/models/predictions/one_feed_new/test_model/model_01.stan', line 72, column 155 to line 92, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type>
seeiittd(const T0__& time, const std::vector<T1__>& state,
         const std::vector<T2__>& params, const std::vector<T3__>& real_data,
         const std::vector<int>& integer_data, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    int T;
    
    current_statement__ = 129;
    T = integer_data[(1 - 1)];
    int n_beta_pieces;
    
    current_statement__ = 130;
    n_beta_pieces = integer_data[(2 - 1)];
    int n_disease_states;
    
    current_statement__ = 131;
    n_disease_states = integer_data[(3 - 1)];
    current_statement__ = 132;
    validate_non_negative_index("beta_left_t", "n_beta_pieces", n_beta_pieces);
    std::vector<local_scalar_t__> beta_left_t;
    beta_left_t = std::vector<local_scalar_t__>(n_beta_pieces, 0);
    
    current_statement__ = 132;
    assign(beta_left_t, nil_index_list(),
      rvalue(real_data,
        cons_list(index_min_max(1, n_beta_pieces), nil_index_list()),
        "real_data"), "assigning variable beta_left_t");
    current_statement__ = 133;
    validate_non_negative_index("beta_right_t", "n_beta_pieces",
                                n_beta_pieces);
    std::vector<local_scalar_t__> beta_right_t;
    beta_right_t = std::vector<local_scalar_t__>(n_beta_pieces, 0);
    
    current_statement__ = 133;
    assign(beta_right_t, nil_index_list(),
      rvalue(real_data,
        cons_list(index_min_max((n_beta_pieces + 1), (2 * n_beta_pieces)),
          nil_index_list()), "real_data"), "assigning variable beta_right_t");
    local_scalar_t__ population;
    
    current_statement__ = 134;
    population = real_data[(((2 * n_beta_pieces) + 1) - 1)];
    current_statement__ = 135;
    validate_non_negative_index("beta_left", "n_beta_pieces", n_beta_pieces);
    std::vector<local_scalar_t__> beta_left;
    beta_left = std::vector<local_scalar_t__>(n_beta_pieces, 0);
    
    current_statement__ = 135;
    assign(beta_left, nil_index_list(),
      rvalue(params,
        cons_list(index_min_max(1, n_beta_pieces), nil_index_list()),
        "params"), "assigning variable beta_left");
    current_statement__ = 136;
    validate_non_negative_index("grad_beta", "n_beta_pieces", n_beta_pieces);
    std::vector<local_scalar_t__> grad_beta;
    grad_beta = std::vector<local_scalar_t__>(n_beta_pieces, 0);
    
    current_statement__ = 136;
    assign(grad_beta, nil_index_list(),
      rvalue(params,
        cons_list(index_min_max((n_beta_pieces + 1), (2 * n_beta_pieces)),
          nil_index_list()), "params"), "assigning variable grad_beta");
    local_scalar_t__ nu;
    
    current_statement__ = 137;
    nu = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 137;
    nu = params[(((2 * n_beta_pieces) + 1) - 1)];
    local_scalar_t__ gamma;
    
    current_statement__ = 138;
    gamma = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 138;
    gamma = params[(((2 * n_beta_pieces) + 2) - 1)];
    local_scalar_t__ kappa;
    
    current_statement__ = 139;
    kappa = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 139;
    kappa = params[(((2 * n_beta_pieces) + 3) - 1)];
    local_scalar_t__ omega;
    
    current_statement__ = 140;
    omega = params[(((2 * n_beta_pieces) + 4) - 1)];
    local_scalar_t__ S;
    
    current_statement__ = 141;
    S = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 141;
    S = state[(1 - 1)];
    local_scalar_t__ E1;
    
    current_statement__ = 142;
    E1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 142;
    E1 = state[(2 - 1)];
    local_scalar_t__ E2;
    
    current_statement__ = 143;
    E2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 143;
    E2 = state[(3 - 1)];
    local_scalar_t__ I1;
    
    current_statement__ = 144;
    I1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 144;
    I1 = state[(4 - 1)];
    local_scalar_t__ I2;
    
    current_statement__ = 145;
    I2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 145;
    I2 = state[(5 - 1)];
    local_scalar_t__ T1;
    
    current_statement__ = 146;
    T1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 146;
    T1 = state[(6 - 1)];
    local_scalar_t__ T2;
    
    current_statement__ = 147;
    T2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 147;
    T2 = state[(7 - 1)];
    local_scalar_t__ D;
    
    current_statement__ = 148;
    D = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 148;
    D = state[(8 - 1)];
    local_scalar_t__ infection_rate;
    
    current_statement__ = 149;
    infection_rate = std::numeric_limits<double>::quiet_NaN();
    local_scalar_t__ nuE1;
    
    current_statement__ = 150;
    nuE1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 150;
    nuE1 = (nu * E1);
    local_scalar_t__ nuE2;
    
    current_statement__ = 151;
    nuE2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 151;
    nuE2 = (nu * E2);
    local_scalar_t__ gammaI1;
    
    current_statement__ = 152;
    gammaI1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 152;
    gammaI1 = (gamma * I1);
    local_scalar_t__ gammaI2;
    
    current_statement__ = 153;
    gammaI2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 153;
    gammaI2 = (gamma * I2);
    local_scalar_t__ kappaT1;
    
    current_statement__ = 154;
    kappaT1 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 154;
    kappaT1 = (kappa * T1);
    local_scalar_t__ kappaT2;
    
    current_statement__ = 155;
    kappaT2 = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 155;
    kappaT2 = (kappa * T2);
    local_scalar_t__ dS_dt;
    
    current_statement__ = 156;
    dS_dt = std::numeric_limits<double>::quiet_NaN();
    local_scalar_t__ dE1_dt;
    
    current_statement__ = 157;
    dE1_dt = std::numeric_limits<double>::quiet_NaN();
    local_scalar_t__ dE2_dt;
    
    current_statement__ = 158;
    dE2_dt = std::numeric_limits<double>::quiet_NaN();
    local_scalar_t__ dI1_dt;
    
    current_statement__ = 159;
    dI1_dt = std::numeric_limits<double>::quiet_NaN();
    local_scalar_t__ dI2_dt;
    
    current_statement__ = 160;
    dI2_dt = std::numeric_limits<double>::quiet_NaN();
    local_scalar_t__ dT1_dt;
    
    current_statement__ = 161;
    dT1_dt = std::numeric_limits<double>::quiet_NaN();
    local_scalar_t__ dT2_dt;
    
    current_statement__ = 162;
    dT2_dt = std::numeric_limits<double>::quiet_NaN();
    local_scalar_t__ dD_dt;
    
    current_statement__ = 163;
    dD_dt = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 169;
    for (size_t i = 1; i <= n_beta_pieces; ++i) {
      current_statement__ = 167;
      if ((primitive_value(logical_gte(time, beta_left_t[(i - 1)])) &&
          primitive_value(logical_lt(time, beta_right_t[(i - 1)])))) {
        local_scalar_t__ beta;
        
        current_statement__ = 164;
        beta = ((grad_beta[(i - 1)] * (time - beta_left_t[(i - 1)])) +
                 beta_left[(i - 1)]);
        current_statement__ = 165;
        infection_rate = (((beta * (I1 + I2)) * S) / population);
      } }
    current_statement__ = 170;
    dS_dt = -infection_rate;
    current_statement__ = 171;
    dE1_dt = (infection_rate - nuE1);
    current_statement__ = 172;
    dE2_dt = (nuE1 - nuE2);
    current_statement__ = 173;
    dI1_dt = (nuE2 - gammaI1);
    current_statement__ = 174;
    dI2_dt = (gammaI1 - gammaI2);
    current_statement__ = 175;
    dT1_dt = ((gammaI2 * omega) - kappaT1);
    current_statement__ = 176;
    dT2_dt = (kappaT1 - kappaT2);
    current_statement__ = 177;
    dD_dt = kappaT2;
    current_statement__ = 178;
    return stan::math::array_builder<local_scalar_t__>().add(dS_dt)
        .add(dE1_dt).add(dE2_dt).add(dI1_dt).add(dI2_dt).add(dT1_dt)
        .add(dT2_dt).add(dD_dt).array();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct seeiittd_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type>
operator()(const T0__& time, const std::vector<T1__>& state,
           const std::vector<T2__>& params,
           const std::vector<T3__>& real_data,
           const std::vector<int>& integer_data, std::ostream* pstream__)  const 
{
return seeiittd(time, state, params, real_data, integer_data, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__>::type>>
integrate_ode_explicit_trapezoidal(const std::vector<T0__>& initial_state,
                                   const T1__& initial_time,
                                   const std::vector<T2__>& times,
                                   const std::vector<T3__>& params,
                                   const std::vector<T4__>& real_data,
                                   const std::vector<int>& integer_data,
                                   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ h;
    
    current_statement__ = 180;
    h = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 181;
    validate_non_negative_index("dstate_dt_initial_time",
                                "size(initial_state)", size(initial_state));
    Eigen::Matrix<local_scalar_t__, -1, 1> dstate_dt_initial_time;
    dstate_dt_initial_time = Eigen::Matrix<local_scalar_t__, -1, 1>(size(
                                                                    initial_state));
    
    current_statement__ = 181;
    for (size_t sym1__ = 1; sym1__ <= size(initial_state); ++sym1__) {
      current_statement__ = 181;
      assign(dstate_dt_initial_time,
        cons_list(index_uni(sym1__), nil_index_list()),
        std::numeric_limits<double>::quiet_NaN(),
        "assigning variable dstate_dt_initial_time");}
    current_statement__ = 182;
    validate_non_negative_index("dstate_dt_tidx", "size(initial_state)",
                                size(initial_state));
    Eigen::Matrix<local_scalar_t__, -1, 1> dstate_dt_tidx;
    dstate_dt_tidx = Eigen::Matrix<local_scalar_t__, -1, 1>(size(
                                                              initial_state));
    
    current_statement__ = 182;
    for (size_t sym1__ = 1; sym1__ <= size(initial_state); ++sym1__) {
      current_statement__ = 182;
      assign(dstate_dt_tidx, cons_list(index_uni(sym1__), nil_index_list()),
        std::numeric_limits<double>::quiet_NaN(),
        "assigning variable dstate_dt_tidx");}
    current_statement__ = 183;
    validate_non_negative_index("k", "size(initial_state)",
                                size(initial_state));
    Eigen::Matrix<local_scalar_t__, -1, 1> k;
    k = Eigen::Matrix<local_scalar_t__, -1, 1>(size(initial_state));
    
    current_statement__ = 183;
    for (size_t sym1__ = 1; sym1__ <= size(initial_state); ++sym1__) {
      current_statement__ = 183;
      assign(k, cons_list(index_uni(sym1__), nil_index_list()),
        std::numeric_limits<double>::quiet_NaN(), "assigning variable k");}
    current_statement__ = 184;
    validate_non_negative_index("state_estimate", "size(times)", size(times));
    current_statement__ = 184;
    validate_non_negative_index("state_estimate", "size(initial_state)",
                                size(initial_state));
    std::vector<std::vector<local_scalar_t__>> state_estimate;
    state_estimate = std::vector<std::vector<local_scalar_t__>>(size(times), std::vector<local_scalar_t__>(
      size(initial_state), 0));
    
    current_statement__ = 185;
    h = (times[(1 - 1)] - initial_time);
    current_statement__ = 186;
    assign(dstate_dt_initial_time, nil_index_list(),
      to_vector(
        seeiittd(initial_time, initial_state, params, real_data,
          integer_data, pstream__)),
      "assigning variable dstate_dt_initial_time");
    current_statement__ = 187;
    assign(k, nil_index_list(), multiply(h, dstate_dt_initial_time),
      "assigning variable k");
    current_statement__ = 188;
    assign(state_estimate,
      cons_list(index_uni(1), cons_list(index_omni(), nil_index_list())),
      to_array_1d(
        add(to_vector(initial_state),
          divide(
            multiply(h,
              add(dstate_dt_initial_time,
                to_vector(
                  seeiittd(times[(1 - 1)],
                    to_array_1d(add(to_vector(initial_state), k)), params,
                    real_data, integer_data, pstream__)))), 2))),
      "assigning variable state_estimate");
    current_statement__ = 194;
    for (size_t tidx = 1; tidx <= (size(times) - 1); ++tidx) {
      current_statement__ = 189;
      h = (times[((tidx + 1) - 1)] - times[(tidx - 1)]);
      current_statement__ = 190;
      assign(dstate_dt_tidx, nil_index_list(),
        to_vector(
          seeiittd(times[(tidx - 1)], state_estimate[(tidx - 1)], params,
            real_data, integer_data, pstream__)),
        "assigning variable dstate_dt_tidx");
      current_statement__ = 191;
      assign(k, nil_index_list(), multiply(h, dstate_dt_tidx),
        "assigning variable k");
      current_statement__ = 192;
      assign(state_estimate,
        cons_list(index_uni((tidx + 1)),
          cons_list(index_omni(), nil_index_list())),
        to_array_1d(
          add(
            to_vector(
              stan::model::deep_copy(
                rvalue(state_estimate,
                  cons_list(index_uni(tidx),
                    cons_list(index_omni(), nil_index_list())),
                  "state_estimate"))),
            divide(
              multiply(h,
                add(dstate_dt_tidx,
                  to_vector(
                    seeiittd(times[((tidx + 1) - 1)],
                      to_array_1d(
                        add(
                          to_vector(
                            stan::model::deep_copy(
                              rvalue(state_estimate,
                                cons_list(index_uni(tidx),
                                  cons_list(index_omni(), nil_index_list())),
                                "state_estimate"))), k)), params, real_data,
                      integer_data, pstream__)))), 2))),
        "assigning variable state_estimate");}
    current_statement__ = 195;
    return state_estimate;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct integrate_ode_explicit_trapezoidal_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__>::type>>
operator()(const std::vector<T0__>& initial_state, const T1__& initial_time,
           const std::vector<T2__>& times, const std::vector<T3__>& params,
           const std::vector<T4__>& real_data,
           const std::vector<int>& integer_data, std::ostream* pstream__)  const 
{
return integrate_ode_explicit_trapezoidal(initial_state, initial_time, times,
         params, real_data, integer_data, pstream__);
}
};

class model_01_model : public model_base_crtp<model_01_model> {

 private:
  int pos__;
  double initial_time;
  int n_beta_pieces;
  std::vector<double> beta_left_t;
  std::vector<double> beta_right_t;
  int n_rho_calls_111_pieces;
  std::vector<int> rho_calls_111_left_t;
  std::vector<int> rho_calls_111_right_t;
  int T;
  std::vector<double> times;
  int n_disease_states;
  double population;
  int deaths_length;
  int deaths_start;
  std::vector<int> deaths;
  int calls_111_length;
  int calls_111_start;
  std::vector<int> calls_111;
  int real_data_length;
  std::vector<double> real_data;
  int integer_data_length;
  std::vector<int> integer_data;
  double mu_dL;
  double sigma_dL;
  double mu_dI;
  double sigma_dI;
  double mu_dT;
  double sigma_dT;
  int max_lag;
 
 public:
  ~model_01_model() { }
  
  std::string model_name() const { return "model_01_model"; }
  
  model_01_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_01_model_namespace::model_01_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      context__.validate_dims("data initialization","initial_time","double",
          context__.to_vec());
      
      current_statement__ = 101;
      initial_time = context__.vals_r("initial_time")[(1 - 1)];
      context__.validate_dims("data initialization","n_beta_pieces","int",
          context__.to_vec());
      
      current_statement__ = 102;
      n_beta_pieces = context__.vals_i("n_beta_pieces")[(1 - 1)];
      current_statement__ = 103;
      validate_non_negative_index("beta_left_t", "n_beta_pieces",
                                  n_beta_pieces);
      context__.validate_dims("data initialization","beta_left_t","double",
          context__.to_vec(n_beta_pieces));
      beta_left_t = std::vector<double>(n_beta_pieces, 0);
      
      current_statement__ = 103;
      assign(beta_left_t, nil_index_list(), context__.vals_r("beta_left_t"),
        "assigning variable beta_left_t");
      current_statement__ = 104;
      validate_non_negative_index("beta_right_t", "n_beta_pieces",
                                  n_beta_pieces);
      context__.validate_dims("data initialization","beta_right_t","double",
          context__.to_vec(n_beta_pieces));
      beta_right_t = std::vector<double>(n_beta_pieces, 0);
      
      current_statement__ = 104;
      assign(beta_right_t, nil_index_list(),
        context__.vals_r("beta_right_t"), "assigning variable beta_right_t");
      context__.validate_dims("data initialization","n_rho_calls_111_pieces",
          "int",context__.to_vec());
      
      current_statement__ = 105;
      n_rho_calls_111_pieces = context__.vals_i("n_rho_calls_111_pieces")[
          (1 - 1)];
      current_statement__ = 106;
      validate_non_negative_index("rho_calls_111_left_t",
                                  "n_rho_calls_111_pieces",
                                  n_rho_calls_111_pieces);
      context__.validate_dims("data initialization","rho_calls_111_left_t",
          "int",context__.to_vec(n_rho_calls_111_pieces));
      rho_calls_111_left_t = std::vector<int>(n_rho_calls_111_pieces, 0);
      
      current_statement__ = 106;
      assign(rho_calls_111_left_t, nil_index_list(),
        context__.vals_i("rho_calls_111_left_t"),
        "assigning variable rho_calls_111_left_t");
      current_statement__ = 107;
      validate_non_negative_index("rho_calls_111_right_t",
                                  "n_rho_calls_111_pieces",
                                  n_rho_calls_111_pieces);
      context__.validate_dims("data initialization","rho_calls_111_right_t",
          "int",context__.to_vec(n_rho_calls_111_pieces));
      rho_calls_111_right_t = std::vector<int>(n_rho_calls_111_pieces, 0);
      
      current_statement__ = 107;
      assign(rho_calls_111_right_t, nil_index_list(),
        context__.vals_i("rho_calls_111_right_t"),
        "assigning variable rho_calls_111_right_t");
      context__.validate_dims("data initialization","T","int",
          context__.to_vec());
      
      current_statement__ = 108;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 109;
      validate_non_negative_index("times", "T", T);
      context__.validate_dims("data initialization","times","double",
          context__.to_vec(T));
      times = std::vector<double>(T, 0);
      
      current_statement__ = 109;
      assign(times, nil_index_list(), context__.vals_r("times"),
        "assigning variable times");
      context__.validate_dims("data initialization","n_disease_states","int",
          context__.to_vec());
      
      current_statement__ = 110;
      n_disease_states = context__.vals_i("n_disease_states")[(1 - 1)];
      context__.validate_dims("data initialization","population","double",
          context__.to_vec());
      
      current_statement__ = 111;
      population = context__.vals_r("population")[(1 - 1)];
      context__.validate_dims("data initialization","deaths_length","int",
          context__.to_vec());
      
      current_statement__ = 112;
      deaths_length = context__.vals_i("deaths_length")[(1 - 1)];
      context__.validate_dims("data initialization","deaths_start","int",
          context__.to_vec());
      
      current_statement__ = 113;
      deaths_start = context__.vals_i("deaths_start")[(1 - 1)];
      current_statement__ = 114;
      validate_non_negative_index("deaths", "deaths_length", deaths_length);
      context__.validate_dims("data initialization","deaths","int",
          context__.to_vec(deaths_length));
      deaths = std::vector<int>(deaths_length, 0);
      
      current_statement__ = 114;
      assign(deaths, nil_index_list(), context__.vals_i("deaths"),
        "assigning variable deaths");
      context__.validate_dims("data initialization","calls_111_length","int",
          context__.to_vec());
      
      current_statement__ = 115;
      calls_111_length = context__.vals_i("calls_111_length")[(1 - 1)];
      context__.validate_dims("data initialization","calls_111_start","int",
          context__.to_vec());
      
      current_statement__ = 116;
      calls_111_start = context__.vals_i("calls_111_start")[(1 - 1)];
      current_statement__ = 117;
      validate_non_negative_index("calls_111", "calls_111_length",
                                  calls_111_length);
      context__.validate_dims("data initialization","calls_111","int",
          context__.to_vec(calls_111_length));
      calls_111 = std::vector<int>(calls_111_length, 0);
      
      current_statement__ = 117;
      assign(calls_111, nil_index_list(), context__.vals_i("calls_111"),
        "assigning variable calls_111");
      context__.validate_dims("data initialization","real_data_length","int",
          context__.to_vec());
      
      current_statement__ = 118;
      real_data_length = context__.vals_i("real_data_length")[(1 - 1)];
      current_statement__ = 119;
      validate_non_negative_index("real_data", "real_data_length",
                                  real_data_length);
      context__.validate_dims("data initialization","real_data","double",
          context__.to_vec(real_data_length));
      real_data = std::vector<double>(real_data_length, 0);
      
      current_statement__ = 119;
      assign(real_data, nil_index_list(), context__.vals_r("real_data"),
        "assigning variable real_data");
      context__.validate_dims("data initialization","integer_data_length",
          "int",context__.to_vec());
      
      current_statement__ = 120;
      integer_data_length = context__.vals_i("integer_data_length")[(1 - 1)];
      current_statement__ = 121;
      validate_non_negative_index("integer_data", "integer_data_length",
                                  integer_data_length);
      context__.validate_dims("data initialization","integer_data","int",
          context__.to_vec(integer_data_length));
      integer_data = std::vector<int>(integer_data_length, 0);
      
      current_statement__ = 121;
      assign(integer_data, nil_index_list(),
        context__.vals_i("integer_data"), "assigning variable integer_data");
      
      current_statement__ = 122;
      mu_dL = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 122;
      mu_dL = 4.00;
      
      current_statement__ = 123;
      sigma_dL = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 123;
      sigma_dL = 3.00;
      
      current_statement__ = 124;
      mu_dI = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 124;
      mu_dI = 5.00;
      
      current_statement__ = 125;
      sigma_dI = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 125;
      sigma_dI = 4.00;
      
      current_statement__ = 126;
      mu_dT = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 126;
      mu_dT = 13.00;
      
      current_statement__ = 127;
      sigma_dT = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 127;
      sigma_dT = 4.00;
      
      current_statement__ = 128;
      max_lag = 13;
      current_statement__ = 102;
      current_statement__ = 102;
      check_greater_or_equal(function__, "n_beta_pieces", n_beta_pieces, 1);
      current_statement__ = 103;
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        current_statement__ = 103;
        current_statement__ = 103;
        check_greater_or_equal(function__, "beta_left_t[sym1__]",
                               beta_left_t[(sym1__ - 1)], 0);}
      current_statement__ = 104;
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        current_statement__ = 104;
        current_statement__ = 104;
        check_greater_or_equal(function__, "beta_right_t[sym1__]",
                               beta_right_t[(sym1__ - 1)], 0);}
      current_statement__ = 105;
      current_statement__ = 105;
      check_greater_or_equal(function__, "n_rho_calls_111_pieces",
                             n_rho_calls_111_pieces, 1);
      current_statement__ = 106;
      for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
        current_statement__ = 106;
        current_statement__ = 106;
        check_greater_or_equal(function__, "rho_calls_111_left_t[sym1__]",
                               rho_calls_111_left_t[(sym1__ - 1)], 0);}
      current_statement__ = 107;
      for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
        current_statement__ = 107;
        current_statement__ = 107;
        check_greater_or_equal(function__, "rho_calls_111_right_t[sym1__]",
                               rho_calls_111_right_t[(sym1__ - 1)], 0);}
      current_statement__ = 108;
      current_statement__ = 108;
      check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 110;
      current_statement__ = 110;
      check_greater_or_equal(function__, "n_disease_states",
                             n_disease_states, 1);
      current_statement__ = 111;
      current_statement__ = 111;
      check_greater_or_equal(function__, "population", population, 0);
      current_statement__ = 112;
      current_statement__ = 112;
      check_greater_or_equal(function__, "deaths_length", deaths_length, 1);
      current_statement__ = 113;
      current_statement__ = 113;
      check_greater_or_equal(function__, "deaths_start", deaths_start, 1);
      current_statement__ = 114;
      for (size_t sym1__ = 1; sym1__ <= deaths_length; ++sym1__) {
        current_statement__ = 114;
        current_statement__ = 114;
        check_greater_or_equal(function__, "deaths[sym1__]",
                               deaths[(sym1__ - 1)], 0);}
      current_statement__ = 115;
      current_statement__ = 115;
      check_greater_or_equal(function__, "calls_111_length",
                             calls_111_length, 1);
      current_statement__ = 116;
      current_statement__ = 116;
      check_greater_or_equal(function__, "calls_111_start", calls_111_start,
                             1);
      current_statement__ = 117;
      for (size_t sym1__ = 1; sym1__ <= calls_111_length; ++sym1__) {
        current_statement__ = 117;
        current_statement__ = 117;
        check_greater_or_equal(function__, "calls_111[sym1__]",
                               calls_111[(sym1__ - 1)], 0);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      current_statement__ = 1;
      validate_non_negative_index("initial_state_raw", "2", 2);
      num_params_r__ += 2;
      current_statement__ = 2;
      validate_non_negative_index("beta", "(n_beta_pieces + 1)",
                                  (n_beta_pieces + 1));
      num_params_r__ += (n_beta_pieces + 1);
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      current_statement__ = 9;
      validate_non_negative_index("rho_calls_111", "n_rho_calls_111_pieces",
                                  n_rho_calls_111_pieces);
      num_params_r__ += n_rho_calls_111_pieces;
      current_statement__ = 10;
      validate_positive_index("lag_weights_calls_111", "(max_lag + 1)",
                              (max_lag + 1));
      num_params_r__ += ((max_lag + 1) - 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_01_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      current_statement__ = 1;
      validate_non_negative_index("initial_state_raw", "2", 2);
      std::vector<local_scalar_t__> initial_state_raw;
      initial_state_raw = std::vector<local_scalar_t__>(2, 0);
      
      current_statement__ = 1;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 1;
        assign(initial_state_raw,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable initial_state_raw");}
      current_statement__ = 1;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(initial_state_raw,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(initial_state_raw[(sym1__ - 1)], 0, 1,
              lp__), "assigning variable initial_state_raw");
        } else {
          current_statement__ = 1;
          assign(initial_state_raw,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(initial_state_raw[(sym1__ - 1)], 0, 1),
            "assigning variable initial_state_raw");
        }}
      current_statement__ = 2;
      validate_non_negative_index("beta", "(n_beta_pieces + 1)",
                                  (n_beta_pieces + 1));
      std::vector<local_scalar_t__> beta;
      beta = std::vector<local_scalar_t__>((n_beta_pieces + 1), 0);
      
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= (n_beta_pieces + 1); ++sym1__) {
        current_statement__ = 2;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable beta");}
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= (n_beta_pieces + 1); ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(beta[(sym1__ - 1)], 0, lp__),
            "assigning variable beta");
        } else {
          current_statement__ = 2;
          assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(beta[(sym1__ - 1)], 0),
            "assigning variable beta");
        }}
      local_scalar_t__ dL;
      
      current_statement__ = 3;
      dL = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        dL = stan::math::lb_constrain(dL, 0, lp__);
      } else {
        current_statement__ = 3;
        dL = stan::math::lb_constrain(dL, 0);
      }
      local_scalar_t__ dI;
      
      current_statement__ = 4;
      dI = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        dI = stan::math::lb_constrain(dI, 0, lp__);
      } else {
        current_statement__ = 4;
        dI = stan::math::lb_constrain(dI, 0);
      }
      local_scalar_t__ dT;
      
      current_statement__ = 5;
      dT = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        dT = stan::math::lb_constrain(dT, 0, lp__);
      } else {
        current_statement__ = 5;
        dT = stan::math::lb_constrain(dT, 0);
      }
      local_scalar_t__ omega;
      
      current_statement__ = 6;
      omega = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        omega = stan::math::lub_constrain(omega, 0, 1, lp__);
      } else {
        current_statement__ = 6;
        omega = stan::math::lub_constrain(omega, 0, 1);
      }
      local_scalar_t__ reciprocal_phi_deaths;
      
      current_statement__ = 7;
      reciprocal_phi_deaths = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        reciprocal_phi_deaths = stan::math::lb_constrain(
                                  reciprocal_phi_deaths, 0, lp__);
      } else {
        current_statement__ = 7;
        reciprocal_phi_deaths = stan::math::lb_constrain(
                                  reciprocal_phi_deaths, 0);
      }
      local_scalar_t__ reciprocal_phi_calls_111;
      
      current_statement__ = 8;
      reciprocal_phi_calls_111 = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        reciprocal_phi_calls_111 = stan::math::lb_constrain(
                                     reciprocal_phi_calls_111, 0, lp__);
      } else {
        current_statement__ = 8;
        reciprocal_phi_calls_111 = stan::math::lb_constrain(
                                     reciprocal_phi_calls_111, 0);
      }
      current_statement__ = 9;
      validate_non_negative_index("rho_calls_111", "n_rho_calls_111_pieces",
                                  n_rho_calls_111_pieces);
      std::vector<local_scalar_t__> rho_calls_111;
      rho_calls_111 = std::vector<local_scalar_t__>(n_rho_calls_111_pieces, 0);
      
      current_statement__ = 9;
      for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
        current_statement__ = 9;
        assign(rho_calls_111, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable rho_calls_111");}
      current_statement__ = 9;
      for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
        current_statement__ = 9;
        if (jacobian__) {
          current_statement__ = 9;
          assign(rho_calls_111,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(rho_calls_111[(sym1__ - 1)], 0, lp__),
            "assigning variable rho_calls_111");
        } else {
          current_statement__ = 9;
          assign(rho_calls_111,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(rho_calls_111[(sym1__ - 1)], 0),
            "assigning variable rho_calls_111");
        }}
      current_statement__ = 10;
      validate_positive_index("lag_weights_calls_111", "(max_lag + 1)",
                              (max_lag + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> lag_weights_calls_111;
      lag_weights_calls_111 = Eigen::Matrix<local_scalar_t__, -1, 1>(
        (max_lag + 1));
      
      Eigen::Matrix<local_scalar_t__, -1, 1> lag_weights_calls_111_in__;
      lag_weights_calls_111_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(
        ((max_lag + 1) - 1));
      
      current_statement__ = 10;
      lag_weights_calls_111_in__ = in__.vector(((max_lag + 1) - 1));
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        assign(lag_weights_calls_111, nil_index_list(),
          stan::math::simplex_constrain(lag_weights_calls_111_in__, lp__),
          "assigning variable lag_weights_calls_111");
      } else {
        current_statement__ = 10;
        assign(lag_weights_calls_111, nil_index_list(),
          stan::math::simplex_constrain(lag_weights_calls_111_in__),
          "assigning variable lag_weights_calls_111");
      }
      current_statement__ = 11;
      validate_non_negative_index("initial_state", "n_disease_states",
                                  n_disease_states);
      std::vector<local_scalar_t__> initial_state;
      initial_state = std::vector<local_scalar_t__>(n_disease_states, 0);
      
      current_statement__ = 12;
      validate_non_negative_index("beta_left", "n_beta_pieces", n_beta_pieces);
      std::vector<local_scalar_t__> beta_left;
      beta_left = std::vector<local_scalar_t__>(n_beta_pieces, 0);
      
      current_statement__ = 13;
      validate_non_negative_index("beta_right", "n_beta_pieces",
                                  n_beta_pieces);
      std::vector<local_scalar_t__> beta_right;
      beta_right = std::vector<local_scalar_t__>(n_beta_pieces, 0);
      
      current_statement__ = 14;
      validate_non_negative_index("grad_beta", "n_beta_pieces", n_beta_pieces);
      std::vector<local_scalar_t__> grad_beta;
      grad_beta = std::vector<local_scalar_t__>(n_beta_pieces, 0);
      
      local_scalar_t__ nu;
      
      current_statement__ = 15;
      nu = std::numeric_limits<double>::quiet_NaN();
      local_scalar_t__ gamma;
      
      current_statement__ = 16;
      gamma = std::numeric_limits<double>::quiet_NaN();
      local_scalar_t__ kappa;
      
      current_statement__ = 17;
      kappa = std::numeric_limits<double>::quiet_NaN();
      local_scalar_t__ phi_deaths;
      
      current_statement__ = 18;
      phi_deaths = std::numeric_limits<double>::quiet_NaN();
      local_scalar_t__ phi_calls_111;
      
      current_statement__ = 19;
      phi_calls_111 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 20;
      validate_non_negative_index("state_estimate", "T", T);
      current_statement__ = 20;
      validate_non_negative_index("state_estimate", "n_disease_states",
                                  n_disease_states);
      std::vector<std::vector<local_scalar_t__>> state_estimate;
      state_estimate = std::vector<std::vector<local_scalar_t__>>(T, std::vector<local_scalar_t__>(n_disease_states, 0));
      
      current_statement__ = 21;
      validate_non_negative_index("S", "(T + 1)", (T + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> S;
      S = Eigen::Matrix<local_scalar_t__, -1, 1>((T + 1));
      
      current_statement__ = 21;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 21;
        assign(S, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable S");}
      current_statement__ = 22;
      validate_non_negative_index("E1", "(T + 1)", (T + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> E1;
      E1 = Eigen::Matrix<local_scalar_t__, -1, 1>((T + 1));
      
      current_statement__ = 22;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 22;
        assign(E1, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable E1");
      }
      current_statement__ = 23;
      validate_non_negative_index("E2", "(T + 1)", (T + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> E2;
      E2 = Eigen::Matrix<local_scalar_t__, -1, 1>((T + 1));
      
      current_statement__ = 23;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 23;
        assign(E2, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable E2");
      }
      current_statement__ = 24;
      validate_non_negative_index("I1", "(T + 1)", (T + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> I1;
      I1 = Eigen::Matrix<local_scalar_t__, -1, 1>((T + 1));
      
      current_statement__ = 24;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 24;
        assign(I1, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable I1");
      }
      current_statement__ = 25;
      validate_non_negative_index("I2", "(T + 1)", (T + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> I2;
      I2 = Eigen::Matrix<local_scalar_t__, -1, 1>((T + 1));
      
      current_statement__ = 25;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 25;
        assign(I2, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable I2");
      }
      current_statement__ = 26;
      validate_non_negative_index("T1", "(T + 1)", (T + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> T1;
      T1 = Eigen::Matrix<local_scalar_t__, -1, 1>((T + 1));
      
      current_statement__ = 26;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 26;
        assign(T1, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable T1");
      }
      current_statement__ = 27;
      validate_non_negative_index("T2", "(T + 1)", (T + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> T2;
      T2 = Eigen::Matrix<local_scalar_t__, -1, 1>((T + 1));
      
      current_statement__ = 27;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 27;
        assign(T2, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable T2");
      }
      current_statement__ = 28;
      validate_non_negative_index("D", "(T + 1)", (T + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> D;
      D = Eigen::Matrix<local_scalar_t__, -1, 1>((T + 1));
      
      current_statement__ = 28;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 28;
        assign(D, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable D");}
      current_statement__ = 29;
      validate_non_negative_index("daily_infections", "T", T);
      Eigen::Matrix<local_scalar_t__, -1, 1> daily_infections;
      daily_infections = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      
      current_statement__ = 29;
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 29;
        assign(daily_infections,
          cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable daily_infections");}
      current_statement__ = 30;
      validate_non_negative_index("daily_deaths", "T", T);
      Eigen::Matrix<local_scalar_t__, -1, 1> daily_deaths;
      daily_deaths = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      
      current_statement__ = 30;
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 30;
        assign(daily_deaths, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable daily_deaths");}
      current_statement__ = 31;
      validate_non_negative_index("calls_111_lagged_daily_infections", "T", T);
      Eigen::Matrix<local_scalar_t__, -1, 1> calls_111_lagged_daily_infections;
      calls_111_lagged_daily_infections = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      
      current_statement__ = 31;
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 31;
        assign(calls_111_lagged_daily_infections,
          cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable calls_111_lagged_daily_infections");}
      current_statement__ = 32;
      validate_non_negative_index("daily_calls_111", "T", T);
      Eigen::Matrix<local_scalar_t__, -1, 1> daily_calls_111;
      daily_calls_111 = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      
      current_statement__ = 32;
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 32;
        assign(daily_calls_111,
          cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable daily_calls_111");}
      current_statement__ = 33;
      assign(initial_state, cons_list(index_uni(1), nil_index_list()),
        (((population - 5.0) * initial_state_raw[(1 - 1)]) + 1.0),
        "assigning variable initial_state");
      current_statement__ = 34;
      assign(initial_state, cons_list(index_uni(2), nil_index_list()),
        (((((population - 5.0) * (1.0 - initial_state_raw[(1 - 1)])) *
            initial_state_raw[(2 - 1)]) / 2.0) + 1.0),
        "assigning variable initial_state");
      current_statement__ = 35;
      assign(initial_state, cons_list(index_uni(3), nil_index_list()),
        (((((population - 5.0) * (1.0 - initial_state_raw[(1 - 1)])) *
            initial_state_raw[(2 - 1)]) / 2.0) + 1.0),
        "assigning variable initial_state");
      current_statement__ = 36;
      assign(initial_state, cons_list(index_uni(4), nil_index_list()),
        (((((population - 5.0) * (1.0 - initial_state_raw[(1 - 1)])) *
            (1.0 - initial_state_raw[(2 - 1)])) / 2.0) + 1.0),
        "assigning variable initial_state");
      current_statement__ = 37;
      assign(initial_state, cons_list(index_uni(5), nil_index_list()),
        (((((population - 5.0) * (1.0 - initial_state_raw[(1 - 1)])) *
            (1.0 - initial_state_raw[(2 - 1)])) / 2.0) + 1.0),
        "assigning variable initial_state");
      current_statement__ = 38;
      assign(initial_state, cons_list(index_uni(6), nil_index_list()), 0.0,
        "assigning variable initial_state");
      current_statement__ = 39;
      assign(initial_state, cons_list(index_uni(7), nil_index_list()), 0.0,
        "assigning variable initial_state");
      current_statement__ = 40;
      assign(initial_state, cons_list(index_uni(8), nil_index_list()), 0.0,
        "assigning variable initial_state");
      current_statement__ = 41;
      assign(beta_left, nil_index_list(),
        rvalue(beta,
          cons_list(index_min_max(1, n_beta_pieces), nil_index_list()),
          "beta"), "assigning variable beta_left");
      current_statement__ = 42;
      assign(beta_right, nil_index_list(),
        rvalue(beta, cons_list(index_min(2), nil_index_list()), "beta"),
        "assigning variable beta_right");
      current_statement__ = 43;
      assign(grad_beta, nil_index_list(),
        to_array_1d(
          elt_divide(subtract(to_vector(beta_right), to_vector(beta_left)),
            subtract(to_vector(beta_right_t), to_vector(beta_left_t)))),
        "assigning variable grad_beta");
      current_statement__ = 44;
      nu = (2.0 / dL);
      current_statement__ = 45;
      gamma = (2.0 / dI);
      current_statement__ = 46;
      kappa = (2.0 / dT);
      current_statement__ = 47;
      phi_deaths = (1.0 / reciprocal_phi_deaths);
      current_statement__ = 48;
      phi_calls_111 = (1.0 / reciprocal_phi_calls_111);
      {
        current_statement__ = 49;
        validate_non_negative_index("params", "((2 * n_beta_pieces) + 4)",
                                    ((2 * n_beta_pieces) + 4));
        std::vector<local_scalar_t__> params;
        params = std::vector<local_scalar_t__>(((2 * n_beta_pieces) + 4), 0);
        
        current_statement__ = 50;
        assign(params,
          cons_list(index_min_max(1, n_beta_pieces), nil_index_list()),
          beta_left, "assigning variable params");
        current_statement__ = 51;
        assign(params,
          cons_list(index_min_max((n_beta_pieces + 1), (2 * n_beta_pieces)),
            nil_index_list()), grad_beta, "assigning variable params");
        current_statement__ = 52;
        assign(params,
          cons_list(index_uni(((2 * n_beta_pieces) + 1)), nil_index_list()),
          nu, "assigning variable params");
        current_statement__ = 53;
        assign(params,
          cons_list(index_uni(((2 * n_beta_pieces) + 2)), nil_index_list()),
          gamma, "assigning variable params");
        current_statement__ = 54;
        assign(params,
          cons_list(index_uni(((2 * n_beta_pieces) + 3)), nil_index_list()),
          kappa, "assigning variable params");
        current_statement__ = 55;
        assign(params,
          cons_list(index_uni(((2 * n_beta_pieces) + 4)), nil_index_list()),
          omega, "assigning variable params");
        current_statement__ = 56;
        assign(state_estimate, nil_index_list(),
          integrate_ode_explicit_trapezoidal(initial_state, initial_time,
            times, params, real_data, integer_data, pstream__),
          "assigning variable state_estimate");
      }
      current_statement__ = 58;
      assign(S, nil_index_list(),
        append_row(initial_state[(1 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(1), nil_index_list())), "state_estimate"))),
        "assigning variable S");
      current_statement__ = 59;
      assign(E1, nil_index_list(),
        append_row(initial_state[(2 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(2), nil_index_list())), "state_estimate"))),
        "assigning variable E1");
      current_statement__ = 60;
      assign(E2, nil_index_list(),
        append_row(initial_state[(3 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(3), nil_index_list())), "state_estimate"))),
        "assigning variable E2");
      current_statement__ = 61;
      assign(I1, nil_index_list(),
        append_row(initial_state[(4 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(4), nil_index_list())), "state_estimate"))),
        "assigning variable I1");
      current_statement__ = 62;
      assign(I2, nil_index_list(),
        append_row(initial_state[(5 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(5), nil_index_list())), "state_estimate"))),
        "assigning variable I2");
      current_statement__ = 63;
      assign(T1, nil_index_list(),
        append_row(initial_state[(6 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(6), nil_index_list())), "state_estimate"))),
        "assigning variable T1");
      current_statement__ = 64;
      assign(T2, nil_index_list(),
        append_row(initial_state[(7 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(7), nil_index_list())), "state_estimate"))),
        "assigning variable T2");
      current_statement__ = 65;
      assign(D, nil_index_list(),
        append_row(initial_state[(8 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(8), nil_index_list())), "state_estimate"))),
        "assigning variable D");
      current_statement__ = 66;
      assign(daily_infections, nil_index_list(),
        add(
          subtract(
            rvalue(S, cons_list(index_min_max(1, T), nil_index_list()), "S"),
            rvalue(S, cons_list(index_min(2), nil_index_list()), "S")),
          stan::math::machine_precision()),
        "assigning variable daily_infections");
      current_statement__ = 67;
      assign(daily_deaths, nil_index_list(),
        add(
          subtract(rvalue(D, cons_list(index_min(2), nil_index_list()), "D"),
            rvalue(D, cons_list(index_min_max(1, T), nil_index_list()), "D")),
          stan::math::machine_precision()), "assigning variable daily_deaths");
      current_statement__ = 68;
      assign(calls_111_lagged_daily_infections, nil_index_list(),
        multiply(lag_weights_calls_111[(1 - 1)], daily_infections),
        "assigning variable calls_111_lagged_daily_infections");
      current_statement__ = 71;
      for (size_t i = 1; i <= max_lag; ++i) {
        current_statement__ = 69;
        assign(calls_111_lagged_daily_infections, nil_index_list(),
          add(stan::model::deep_copy(calls_111_lagged_daily_infections),
            multiply(lag_weights_calls_111[((i + 1) - 1)],
              append_row(rep_vector(0.0, i),
                rvalue(daily_infections,
                  cons_list(index_min_max(1, (T - i)), nil_index_list()),
                  "daily_infections")))),
          "assigning variable calls_111_lagged_daily_infections");}
      current_statement__ = 72;
      assign(daily_calls_111, nil_index_list(), rep_vector(0.0, T),
        "assigning variable daily_calls_111");
      current_statement__ = 75;
      for (size_t i = 1; i <= n_rho_calls_111_pieces; ++i) {
        current_statement__ = 73;
        assign(daily_calls_111,
          cons_list(
            index_min_max(rho_calls_111_left_t[(i - 1)], (rho_calls_111_right_t[
                                                           (i - 1)] - 1)),
            nil_index_list()),
          multiply(
            rvalue(calls_111_lagged_daily_infections,
              cons_list(
                index_min_max(rho_calls_111_left_t[(i - 1)], (rho_calls_111_right_t[
                                                               (i - 1)] - 1)),
                nil_index_list()), "calls_111_lagged_daily_infections"),
            rho_calls_111[(i - 1)]), "assigning variable daily_calls_111");}
      {
        current_statement__ = 87;
        lp_accum__.add(
          beta_log<propto__>(initial_state_raw[(1 - 1)], 5.0, 0.5));
        current_statement__ = 88;
        lp_accum__.add(
          beta_log<propto__>(initial_state_raw[(2 - 1)], 1.1, 1.1));
        current_statement__ = 89;
        lp_accum__.add(normal_log<propto__>(beta[(1 - 1)], 0, 0.5));
        current_statement__ = 90;
        lp_accum__.add(
          normal_log<propto__>(
            rvalue(beta, cons_list(index_min(2), nil_index_list()), "beta"),
            rvalue(beta,
              cons_list(index_min_max(1, n_beta_pieces), nil_index_list()),
              "beta"), 0.01));
        current_statement__ = 91;
        lp_accum__.add(normal_log<propto__>(dL, mu_dL, sigma_dL));
        current_statement__ = 92;
        lp_accum__.add(normal_log<propto__>(dI, mu_dI, sigma_dI));
        current_statement__ = 93;
        lp_accum__.add(normal_log<propto__>(dT, mu_dT, sigma_dT));
        current_statement__ = 94;
        lp_accum__.add(beta_log<propto__>(omega, 3.8, 571.6));
        current_statement__ = 95;
        lp_accum__.add(exponential_log<propto__>(reciprocal_phi_deaths, 5));
        current_statement__ = 96;
        lp_accum__.add(exponential_log<propto__>(reciprocal_phi_calls_111, 5));
        current_statement__ = 97;
        lp_accum__.add(normal_log<propto__>(rho_calls_111, 0, 0.5));
        current_statement__ = 98;
        lp_accum__.add(
          dirichlet_log<propto__>(lag_weights_calls_111,
            rep_vector(0.1, (max_lag + 1))));
        current_statement__ = 99;
        lp_accum__.add(
          neg_binomial_2_lpmf<false>(deaths,
            rvalue(daily_deaths,
              cons_list(
                index_min_max(deaths_start, ((deaths_start - 1) +
                                              deaths_length)),
                nil_index_list()), "daily_deaths"), phi_deaths));
        current_statement__ = 100;
        lp_accum__.add(
          neg_binomial_2_lpmf<false>(calls_111,
            rvalue(daily_calls_111,
              cons_list(
                index_min_max(calls_111_start, ((calls_111_start - 1) +
                                                 calls_111_length)),
                nil_index_list()), "daily_calls_111"), phi_calls_111));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_01_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    
    try {
      current_statement__ = 1;
      validate_non_negative_index("initial_state_raw", "2", 2);
      std::vector<double> initial_state_raw;
      initial_state_raw = std::vector<double>(2, 0);
      
      current_statement__ = 1;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 1;
        assign(initial_state_raw,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable initial_state_raw");}
      current_statement__ = 1;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 1;
        assign(initial_state_raw,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(initial_state_raw[(sym1__ - 1)], 0, 1),
          "assigning variable initial_state_raw");}
      current_statement__ = 2;
      validate_non_negative_index("beta", "(n_beta_pieces + 1)",
                                  (n_beta_pieces + 1));
      std::vector<double> beta;
      beta = std::vector<double>((n_beta_pieces + 1), 0);
      
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= (n_beta_pieces + 1); ++sym1__) {
        current_statement__ = 2;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable beta");}
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= (n_beta_pieces + 1); ++sym1__) {
        current_statement__ = 2;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(beta[(sym1__ - 1)], 0),
          "assigning variable beta");}
      double dL;
      
      current_statement__ = 3;
      dL = in__.scalar();
      current_statement__ = 3;
      dL = stan::math::lb_constrain(dL, 0);
      double dI;
      
      current_statement__ = 4;
      dI = in__.scalar();
      current_statement__ = 4;
      dI = stan::math::lb_constrain(dI, 0);
      double dT;
      
      current_statement__ = 5;
      dT = in__.scalar();
      current_statement__ = 5;
      dT = stan::math::lb_constrain(dT, 0);
      double omega;
      
      current_statement__ = 6;
      omega = in__.scalar();
      current_statement__ = 6;
      omega = stan::math::lub_constrain(omega, 0, 1);
      double reciprocal_phi_deaths;
      
      current_statement__ = 7;
      reciprocal_phi_deaths = in__.scalar();
      current_statement__ = 7;
      reciprocal_phi_deaths = stan::math::lb_constrain(reciprocal_phi_deaths,
                                0);
      double reciprocal_phi_calls_111;
      
      current_statement__ = 8;
      reciprocal_phi_calls_111 = in__.scalar();
      current_statement__ = 8;
      reciprocal_phi_calls_111 = stan::math::lb_constrain(
                                   reciprocal_phi_calls_111, 0);
      current_statement__ = 9;
      validate_non_negative_index("rho_calls_111", "n_rho_calls_111_pieces",
                                  n_rho_calls_111_pieces);
      std::vector<double> rho_calls_111;
      rho_calls_111 = std::vector<double>(n_rho_calls_111_pieces, 0);
      
      current_statement__ = 9;
      for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
        current_statement__ = 9;
        assign(rho_calls_111, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable rho_calls_111");}
      current_statement__ = 9;
      for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
        current_statement__ = 9;
        assign(rho_calls_111, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(rho_calls_111[(sym1__ - 1)], 0),
          "assigning variable rho_calls_111");}
      current_statement__ = 10;
      validate_positive_index("lag_weights_calls_111", "(max_lag + 1)",
                              (max_lag + 1));
      Eigen::Matrix<double, -1, 1> lag_weights_calls_111;
      lag_weights_calls_111 = Eigen::Matrix<double, -1, 1>((max_lag + 1));
      
      Eigen::Matrix<local_scalar_t__, -1, 1> lag_weights_calls_111_in__;
      lag_weights_calls_111_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(
        ((max_lag + 1) - 1));
      
      current_statement__ = 10;
      lag_weights_calls_111_in__ = in__.vector(((max_lag + 1) - 1));
      current_statement__ = 10;
      assign(lag_weights_calls_111, nil_index_list(),
        stan::math::simplex_constrain(lag_weights_calls_111_in__),
        "assigning variable lag_weights_calls_111");
      current_statement__ = 11;
      validate_non_negative_index("initial_state", "n_disease_states",
                                  n_disease_states);
      std::vector<double> initial_state;
      initial_state = std::vector<double>(n_disease_states, 0);
      
      current_statement__ = 12;
      validate_non_negative_index("beta_left", "n_beta_pieces", n_beta_pieces);
      std::vector<double> beta_left;
      beta_left = std::vector<double>(n_beta_pieces, 0);
      
      current_statement__ = 13;
      validate_non_negative_index("beta_right", "n_beta_pieces",
                                  n_beta_pieces);
      std::vector<double> beta_right;
      beta_right = std::vector<double>(n_beta_pieces, 0);
      
      current_statement__ = 14;
      validate_non_negative_index("grad_beta", "n_beta_pieces", n_beta_pieces);
      std::vector<double> grad_beta;
      grad_beta = std::vector<double>(n_beta_pieces, 0);
      
      double nu;
      
      current_statement__ = 15;
      nu = std::numeric_limits<double>::quiet_NaN();
      double gamma;
      
      current_statement__ = 16;
      gamma = std::numeric_limits<double>::quiet_NaN();
      double kappa;
      
      current_statement__ = 17;
      kappa = std::numeric_limits<double>::quiet_NaN();
      double phi_deaths;
      
      current_statement__ = 18;
      phi_deaths = std::numeric_limits<double>::quiet_NaN();
      double phi_calls_111;
      
      current_statement__ = 19;
      phi_calls_111 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 20;
      validate_non_negative_index("state_estimate", "T", T);
      current_statement__ = 20;
      validate_non_negative_index("state_estimate", "n_disease_states",
                                  n_disease_states);
      std::vector<std::vector<double>> state_estimate;
      state_estimate = std::vector<std::vector<double>>(T, std::vector<double>(n_disease_states, 0));
      
      current_statement__ = 21;
      validate_non_negative_index("S", "(T + 1)", (T + 1));
      Eigen::Matrix<double, -1, 1> S;
      S = Eigen::Matrix<double, -1, 1>((T + 1));
      
      current_statement__ = 21;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 21;
        assign(S, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable S");}
      current_statement__ = 22;
      validate_non_negative_index("E1", "(T + 1)", (T + 1));
      Eigen::Matrix<double, -1, 1> E1;
      E1 = Eigen::Matrix<double, -1, 1>((T + 1));
      
      current_statement__ = 22;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 22;
        assign(E1, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable E1");
      }
      current_statement__ = 23;
      validate_non_negative_index("E2", "(T + 1)", (T + 1));
      Eigen::Matrix<double, -1, 1> E2;
      E2 = Eigen::Matrix<double, -1, 1>((T + 1));
      
      current_statement__ = 23;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 23;
        assign(E2, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable E2");
      }
      current_statement__ = 24;
      validate_non_negative_index("I1", "(T + 1)", (T + 1));
      Eigen::Matrix<double, -1, 1> I1;
      I1 = Eigen::Matrix<double, -1, 1>((T + 1));
      
      current_statement__ = 24;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 24;
        assign(I1, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable I1");
      }
      current_statement__ = 25;
      validate_non_negative_index("I2", "(T + 1)", (T + 1));
      Eigen::Matrix<double, -1, 1> I2;
      I2 = Eigen::Matrix<double, -1, 1>((T + 1));
      
      current_statement__ = 25;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 25;
        assign(I2, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable I2");
      }
      current_statement__ = 26;
      validate_non_negative_index("T1", "(T + 1)", (T + 1));
      Eigen::Matrix<double, -1, 1> T1;
      T1 = Eigen::Matrix<double, -1, 1>((T + 1));
      
      current_statement__ = 26;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 26;
        assign(T1, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable T1");
      }
      current_statement__ = 27;
      validate_non_negative_index("T2", "(T + 1)", (T + 1));
      Eigen::Matrix<double, -1, 1> T2;
      T2 = Eigen::Matrix<double, -1, 1>((T + 1));
      
      current_statement__ = 27;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 27;
        assign(T2, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable T2");
      }
      current_statement__ = 28;
      validate_non_negative_index("D", "(T + 1)", (T + 1));
      Eigen::Matrix<double, -1, 1> D;
      D = Eigen::Matrix<double, -1, 1>((T + 1));
      
      current_statement__ = 28;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 28;
        assign(D, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable D");}
      current_statement__ = 29;
      validate_non_negative_index("daily_infections", "T", T);
      Eigen::Matrix<double, -1, 1> daily_infections;
      daily_infections = Eigen::Matrix<double, -1, 1>(T);
      
      current_statement__ = 29;
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 29;
        assign(daily_infections,
          cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable daily_infections");}
      current_statement__ = 30;
      validate_non_negative_index("daily_deaths", "T", T);
      Eigen::Matrix<double, -1, 1> daily_deaths;
      daily_deaths = Eigen::Matrix<double, -1, 1>(T);
      
      current_statement__ = 30;
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 30;
        assign(daily_deaths, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable daily_deaths");}
      current_statement__ = 31;
      validate_non_negative_index("calls_111_lagged_daily_infections", "T", T);
      Eigen::Matrix<double, -1, 1> calls_111_lagged_daily_infections;
      calls_111_lagged_daily_infections = Eigen::Matrix<double, -1, 1>(T);
      
      current_statement__ = 31;
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 31;
        assign(calls_111_lagged_daily_infections,
          cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable calls_111_lagged_daily_infections");}
      current_statement__ = 32;
      validate_non_negative_index("daily_calls_111", "T", T);
      Eigen::Matrix<double, -1, 1> daily_calls_111;
      daily_calls_111 = Eigen::Matrix<double, -1, 1>(T);
      
      current_statement__ = 32;
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 32;
        assign(daily_calls_111,
          cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable daily_calls_111");}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.push_back(initial_state_raw[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (n_beta_pieces + 1); ++sym1__) {
        vars__.push_back(beta[(sym1__ - 1)]);}
      vars__.push_back(dL);
      vars__.push_back(dI);
      vars__.push_back(dT);
      vars__.push_back(omega);
      vars__.push_back(reciprocal_phi_deaths);
      vars__.push_back(reciprocal_phi_calls_111);
      for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
        vars__.push_back(rho_calls_111[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (max_lag + 1); ++sym1__) {
        vars__.push_back(lag_weights_calls_111[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 33;
      assign(initial_state, cons_list(index_uni(1), nil_index_list()),
        (((population - 5.0) * initial_state_raw[(1 - 1)]) + 1.0),
        "assigning variable initial_state");
      current_statement__ = 34;
      assign(initial_state, cons_list(index_uni(2), nil_index_list()),
        (((((population - 5.0) * (1.0 - initial_state_raw[(1 - 1)])) *
            initial_state_raw[(2 - 1)]) / 2.0) + 1.0),
        "assigning variable initial_state");
      current_statement__ = 35;
      assign(initial_state, cons_list(index_uni(3), nil_index_list()),
        (((((population - 5.0) * (1.0 - initial_state_raw[(1 - 1)])) *
            initial_state_raw[(2 - 1)]) / 2.0) + 1.0),
        "assigning variable initial_state");
      current_statement__ = 36;
      assign(initial_state, cons_list(index_uni(4), nil_index_list()),
        (((((population - 5.0) * (1.0 - initial_state_raw[(1 - 1)])) *
            (1.0 - initial_state_raw[(2 - 1)])) / 2.0) + 1.0),
        "assigning variable initial_state");
      current_statement__ = 37;
      assign(initial_state, cons_list(index_uni(5), nil_index_list()),
        (((((population - 5.0) * (1.0 - initial_state_raw[(1 - 1)])) *
            (1.0 - initial_state_raw[(2 - 1)])) / 2.0) + 1.0),
        "assigning variable initial_state");
      current_statement__ = 38;
      assign(initial_state, cons_list(index_uni(6), nil_index_list()), 0.0,
        "assigning variable initial_state");
      current_statement__ = 39;
      assign(initial_state, cons_list(index_uni(7), nil_index_list()), 0.0,
        "assigning variable initial_state");
      current_statement__ = 40;
      assign(initial_state, cons_list(index_uni(8), nil_index_list()), 0.0,
        "assigning variable initial_state");
      current_statement__ = 41;
      assign(beta_left, nil_index_list(),
        rvalue(beta,
          cons_list(index_min_max(1, n_beta_pieces), nil_index_list()),
          "beta"), "assigning variable beta_left");
      current_statement__ = 42;
      assign(beta_right, nil_index_list(),
        rvalue(beta, cons_list(index_min(2), nil_index_list()), "beta"),
        "assigning variable beta_right");
      current_statement__ = 43;
      assign(grad_beta, nil_index_list(),
        to_array_1d(
          elt_divide(subtract(to_vector(beta_right), to_vector(beta_left)),
            subtract(to_vector(beta_right_t), to_vector(beta_left_t)))),
        "assigning variable grad_beta");
      current_statement__ = 44;
      nu = (2.0 / dL);
      current_statement__ = 45;
      gamma = (2.0 / dI);
      current_statement__ = 46;
      kappa = (2.0 / dT);
      current_statement__ = 47;
      phi_deaths = (1.0 / reciprocal_phi_deaths);
      current_statement__ = 48;
      phi_calls_111 = (1.0 / reciprocal_phi_calls_111);
      {
        current_statement__ = 49;
        validate_non_negative_index("params", "((2 * n_beta_pieces) + 4)",
                                    ((2 * n_beta_pieces) + 4));
        std::vector<double> params;
        params = std::vector<double>(((2 * n_beta_pieces) + 4), 0);
        
        current_statement__ = 50;
        assign(params,
          cons_list(index_min_max(1, n_beta_pieces), nil_index_list()),
          beta_left, "assigning variable params");
        current_statement__ = 51;
        assign(params,
          cons_list(index_min_max((n_beta_pieces + 1), (2 * n_beta_pieces)),
            nil_index_list()), grad_beta, "assigning variable params");
        current_statement__ = 52;
        assign(params,
          cons_list(index_uni(((2 * n_beta_pieces) + 1)), nil_index_list()),
          nu, "assigning variable params");
        current_statement__ = 53;
        assign(params,
          cons_list(index_uni(((2 * n_beta_pieces) + 2)), nil_index_list()),
          gamma, "assigning variable params");
        current_statement__ = 54;
        assign(params,
          cons_list(index_uni(((2 * n_beta_pieces) + 3)), nil_index_list()),
          kappa, "assigning variable params");
        current_statement__ = 55;
        assign(params,
          cons_list(index_uni(((2 * n_beta_pieces) + 4)), nil_index_list()),
          omega, "assigning variable params");
        current_statement__ = 56;
        assign(state_estimate, nil_index_list(),
          integrate_ode_explicit_trapezoidal(initial_state, initial_time,
            times, params, real_data, integer_data, pstream__),
          "assigning variable state_estimate");
      }
      current_statement__ = 58;
      assign(S, nil_index_list(),
        append_row(initial_state[(1 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(1), nil_index_list())), "state_estimate"))),
        "assigning variable S");
      current_statement__ = 59;
      assign(E1, nil_index_list(),
        append_row(initial_state[(2 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(2), nil_index_list())), "state_estimate"))),
        "assigning variable E1");
      current_statement__ = 60;
      assign(E2, nil_index_list(),
        append_row(initial_state[(3 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(3), nil_index_list())), "state_estimate"))),
        "assigning variable E2");
      current_statement__ = 61;
      assign(I1, nil_index_list(),
        append_row(initial_state[(4 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(4), nil_index_list())), "state_estimate"))),
        "assigning variable I1");
      current_statement__ = 62;
      assign(I2, nil_index_list(),
        append_row(initial_state[(5 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(5), nil_index_list())), "state_estimate"))),
        "assigning variable I2");
      current_statement__ = 63;
      assign(T1, nil_index_list(),
        append_row(initial_state[(6 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(6), nil_index_list())), "state_estimate"))),
        "assigning variable T1");
      current_statement__ = 64;
      assign(T2, nil_index_list(),
        append_row(initial_state[(7 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(7), nil_index_list())), "state_estimate"))),
        "assigning variable T2");
      current_statement__ = 65;
      assign(D, nil_index_list(),
        append_row(initial_state[(8 - 1)],
          to_vector(
            rvalue(state_estimate,
              cons_list(index_omni(),
                cons_list(index_uni(8), nil_index_list())), "state_estimate"))),
        "assigning variable D");
      current_statement__ = 66;
      assign(daily_infections, nil_index_list(),
        add(
          subtract(
            rvalue(S, cons_list(index_min_max(1, T), nil_index_list()), "S"),
            rvalue(S, cons_list(index_min(2), nil_index_list()), "S")),
          stan::math::machine_precision()),
        "assigning variable daily_infections");
      current_statement__ = 67;
      assign(daily_deaths, nil_index_list(),
        add(
          subtract(rvalue(D, cons_list(index_min(2), nil_index_list()), "D"),
            rvalue(D, cons_list(index_min_max(1, T), nil_index_list()), "D")),
          stan::math::machine_precision()), "assigning variable daily_deaths");
      current_statement__ = 68;
      assign(calls_111_lagged_daily_infections, nil_index_list(),
        multiply(lag_weights_calls_111[(1 - 1)], daily_infections),
        "assigning variable calls_111_lagged_daily_infections");
      current_statement__ = 71;
      for (size_t i = 1; i <= max_lag; ++i) {
        current_statement__ = 69;
        assign(calls_111_lagged_daily_infections, nil_index_list(),
          add(stan::model::deep_copy(calls_111_lagged_daily_infections),
            multiply(lag_weights_calls_111[((i + 1) - 1)],
              append_row(rep_vector(0.0, i),
                rvalue(daily_infections,
                  cons_list(index_min_max(1, (T - i)), nil_index_list()),
                  "daily_infections")))),
          "assigning variable calls_111_lagged_daily_infections");}
      current_statement__ = 72;
      assign(daily_calls_111, nil_index_list(), rep_vector(0.0, T),
        "assigning variable daily_calls_111");
      current_statement__ = 75;
      for (size_t i = 1; i <= n_rho_calls_111_pieces; ++i) {
        current_statement__ = 73;
        assign(daily_calls_111,
          cons_list(
            index_min_max(rho_calls_111_left_t[(i - 1)], (rho_calls_111_right_t[
                                                           (i - 1)] - 1)),
            nil_index_list()),
          multiply(
            rvalue(calls_111_lagged_daily_infections,
              cons_list(
                index_min_max(rho_calls_111_left_t[(i - 1)], (rho_calls_111_right_t[
                                                               (i - 1)] - 1)),
                nil_index_list()), "calls_111_lagged_daily_infections"),
            rho_calls_111[(i - 1)]), "assigning variable daily_calls_111");}
      for (size_t sym1__ = 1; sym1__ <= n_disease_states; ++sym1__) {
        vars__.push_back(initial_state[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        vars__.push_back(beta_left[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        vars__.push_back(beta_right[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        vars__.push_back(grad_beta[(sym1__ - 1)]);}
      vars__.push_back(nu);
      vars__.push_back(gamma);
      vars__.push_back(kappa);
      vars__.push_back(phi_deaths);
      vars__.push_back(phi_calls_111);
      for (size_t sym1__ = 1; sym1__ <= n_disease_states; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= T; ++sym2__) {
          vars__.push_back(state_estimate[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        vars__.push_back(S[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        vars__.push_back(E1[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        vars__.push_back(E2[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        vars__.push_back(I1[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        vars__.push_back(I2[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        vars__.push_back(T1[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        vars__.push_back(T2[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        vars__.push_back(D[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.push_back(daily_infections[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.push_back(daily_deaths[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.push_back(calls_111_lagged_daily_infections[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.push_back(daily_calls_111[(sym1__ - 1)]);}
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      current_statement__ = 76;
      validate_non_negative_index("I", "(T + 1)", (T + 1));
      Eigen::Matrix<double, -1, 1> I;
      I = Eigen::Matrix<double, -1, 1>((T + 1));
      
      current_statement__ = 76;
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        current_statement__ = 76;
        assign(I, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(), "assigning variable I");}
      current_statement__ = 76;
      assign(I, nil_index_list(), add(I1, I2), "assigning variable I");
      current_statement__ = 77;
      validate_non_negative_index("effective_reproduction_number", "T", T);
      Eigen::Matrix<double, -1, 1> effective_reproduction_number;
      effective_reproduction_number = Eigen::Matrix<double, -1, 1>(T);
      
      current_statement__ = 77;
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 77;
        assign(effective_reproduction_number,
          cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable effective_reproduction_number");}
      current_statement__ = 77;
      assign(effective_reproduction_number, nil_index_list(),
        multiply(
          elt_divide(daily_infections,
            rvalue(I, cons_list(index_min_max(1, T), nil_index_list()), "I")),
          dI), "assigning variable effective_reproduction_number");
      current_statement__ = 78;
      validate_non_negative_index("growth_rate", "(T - 7)", (T - 7));
      Eigen::Matrix<double, -1, 1> growth_rate;
      growth_rate = Eigen::Matrix<double, -1, 1>((T - 7));
      
      current_statement__ = 78;
      for (size_t sym1__ = 1; sym1__ <= (T - 7); ++sym1__) {
        current_statement__ = 78;
        assign(growth_rate, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable growth_rate");}
      current_statement__ = 78;
      assign(growth_rate, nil_index_list(),
        divide(
          subtract(
            stan::math::log(
              rvalue(daily_infections,
                cons_list(index_min(8), nil_index_list()),
                "daily_infections")),
            stan::math::log(
              rvalue(daily_infections,
                cons_list(index_min_max(1, (T - 7)), nil_index_list()),
                "daily_infections"))), 7.0), "assigning variable growth_rate");
      current_statement__ = 79;
      validate_non_negative_index("pred_deaths", "(deaths_length + 7)",
                                  (deaths_length + 7));
      std::vector<int> pred_deaths;
      pred_deaths = std::vector<int>((deaths_length + 7), 0);
      
      current_statement__ = 80;
      validate_non_negative_index("pred_calls_111", "calls_111_length",
                                  calls_111_length);
      std::vector<int> pred_calls_111;
      pred_calls_111 = std::vector<int>(calls_111_length, 0);
      
      current_statement__ = 83;
      for (size_t i = 1; i <= (deaths_length + 7); ++i) {
        current_statement__ = 81;
        assign(pred_deaths, cons_list(index_uni(i), nil_index_list()),
          neg_binomial_2_rng(daily_deaths[(((deaths_start - 1) + i) - 1)],
            phi_deaths, base_rng__), "assigning variable pred_deaths");}
      current_statement__ = 86;
      for (size_t i = 1; i <= calls_111_length; ++i) {
        current_statement__ = 84;
        assign(pred_calls_111, cons_list(index_uni(i), nil_index_list()),
          neg_binomial_2_rng(
            daily_calls_111[(((calls_111_start - 1) + i) - 1)],
            phi_calls_111, base_rng__), "assigning variable pred_calls_111");
      }
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        vars__.push_back(I[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.push_back(effective_reproduction_number[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (T - 7); ++sym1__) {
        vars__.push_back(growth_rate[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (deaths_length + 7); ++sym1__) {
        vars__.push_back(pred_deaths[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= calls_111_length; ++sym1__) {
        vars__.push_back(pred_calls_111[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      current_statement__ = 1;
      validate_non_negative_index("initial_state_raw", "2", 2);
      std::vector<double> initial_state_raw;
      initial_state_raw = std::vector<double>(2, 0);
      
      current_statement__ = 1;
      assign(initial_state_raw, nil_index_list(),
        context__.vals_r("initial_state_raw"),
        "assigning variable initial_state_raw");
      current_statement__ = 1;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 1;
        assign(initial_state_raw,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(initial_state_raw[(sym1__ - 1)], 0, 1),
          "assigning variable initial_state_raw");}
      current_statement__ = 2;
      validate_non_negative_index("beta", "(n_beta_pieces + 1)",
                                  (n_beta_pieces + 1));
      std::vector<double> beta;
      beta = std::vector<double>((n_beta_pieces + 1), 0);
      
      current_statement__ = 2;
      assign(beta, nil_index_list(), context__.vals_r("beta"),
        "assigning variable beta");
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= (n_beta_pieces + 1); ++sym1__) {
        current_statement__ = 2;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(beta[(sym1__ - 1)], 0),
          "assigning variable beta");}
      double dL;
      
      current_statement__ = 3;
      dL = context__.vals_r("dL")[(1 - 1)];
      current_statement__ = 3;
      dL = stan::math::lb_free(dL, 0);
      double dI;
      
      current_statement__ = 4;
      dI = context__.vals_r("dI")[(1 - 1)];
      current_statement__ = 4;
      dI = stan::math::lb_free(dI, 0);
      double dT;
      
      current_statement__ = 5;
      dT = context__.vals_r("dT")[(1 - 1)];
      current_statement__ = 5;
      dT = stan::math::lb_free(dT, 0);
      double omega;
      
      current_statement__ = 6;
      omega = context__.vals_r("omega")[(1 - 1)];
      current_statement__ = 6;
      omega = stan::math::lub_free(omega, 0, 1);
      double reciprocal_phi_deaths;
      
      current_statement__ = 7;
      reciprocal_phi_deaths = context__.vals_r("reciprocal_phi_deaths")[
          (1 - 1)];
      current_statement__ = 7;
      reciprocal_phi_deaths = stan::math::lb_free(reciprocal_phi_deaths, 0);
      double reciprocal_phi_calls_111;
      
      current_statement__ = 8;
      reciprocal_phi_calls_111 = context__.vals_r("reciprocal_phi_calls_111")[
          (1 - 1)];
      current_statement__ = 8;
      reciprocal_phi_calls_111 = stan::math::lb_free(
                                   reciprocal_phi_calls_111, 0);
      current_statement__ = 9;
      validate_non_negative_index("rho_calls_111", "n_rho_calls_111_pieces",
                                  n_rho_calls_111_pieces);
      std::vector<double> rho_calls_111;
      rho_calls_111 = std::vector<double>(n_rho_calls_111_pieces, 0);
      
      current_statement__ = 9;
      assign(rho_calls_111, nil_index_list(),
        context__.vals_r("rho_calls_111"), "assigning variable rho_calls_111");
      current_statement__ = 9;
      for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
        current_statement__ = 9;
        assign(rho_calls_111, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(rho_calls_111[(sym1__ - 1)], 0),
          "assigning variable rho_calls_111");}
      current_statement__ = 10;
      validate_positive_index("lag_weights_calls_111", "(max_lag + 1)",
                              (max_lag + 1));
      Eigen::Matrix<double, -1, 1> lag_weights_calls_111;
      lag_weights_calls_111 = Eigen::Matrix<double, -1, 1>((max_lag + 1));
      
      {
        std::vector<local_scalar_t__> lag_weights_calls_111_flat__;
        current_statement__ = 10;
        assign(lag_weights_calls_111_flat__, nil_index_list(),
          context__.vals_r("lag_weights_calls_111"),
          "assigning variable lag_weights_calls_111_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (size_t sym1__ = 1; sym1__ <= (max_lag + 1); ++sym1__) {
          current_statement__ = 10;
          assign(lag_weights_calls_111,
            cons_list(index_uni(sym1__), nil_index_list()),
            lag_weights_calls_111_flat__[(pos__ - 1)],
            "assigning variable lag_weights_calls_111");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 10;
      assign(lag_weights_calls_111, nil_index_list(),
        stan::math::simplex_free(lag_weights_calls_111),
        "assigning variable lag_weights_calls_111");
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.push_back(initial_state_raw[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= (n_beta_pieces + 1); ++sym1__) {
        vars__.push_back(beta[(sym1__ - 1)]);}
      vars__.push_back(dL);
      vars__.push_back(dI);
      vars__.push_back(dT);
      vars__.push_back(omega);
      vars__.push_back(reciprocal_phi_deaths);
      vars__.push_back(reciprocal_phi_calls_111);
      for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
        vars__.push_back(rho_calls_111[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= ((max_lag + 1) - 1); ++sym1__) {
        vars__.push_back(lag_weights_calls_111[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("initial_state_raw");
    names__.push_back("beta");
    names__.push_back("dL");
    names__.push_back("dI");
    names__.push_back("dT");
    names__.push_back("omega");
    names__.push_back("reciprocal_phi_deaths");
    names__.push_back("reciprocal_phi_calls_111");
    names__.push_back("rho_calls_111");
    names__.push_back("lag_weights_calls_111");
    names__.push_back("initial_state");
    names__.push_back("beta_left");
    names__.push_back("beta_right");
    names__.push_back("grad_beta");
    names__.push_back("nu");
    names__.push_back("gamma");
    names__.push_back("kappa");
    names__.push_back("phi_deaths");
    names__.push_back("phi_calls_111");
    names__.push_back("state_estimate");
    names__.push_back("S");
    names__.push_back("E1");
    names__.push_back("E2");
    names__.push_back("I1");
    names__.push_back("I2");
    names__.push_back("T1");
    names__.push_back("T2");
    names__.push_back("D");
    names__.push_back("daily_infections");
    names__.push_back("daily_deaths");
    names__.push_back("calls_111_lagged_daily_infections");
    names__.push_back("daily_calls_111");
    names__.push_back("I");
    names__.push_back("effective_reproduction_number");
    names__.push_back("growth_rate");
    names__.push_back("pred_deaths");
    names__.push_back("pred_calls_111");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((n_beta_pieces + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(n_rho_calls_111_pieces);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((max_lag + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(n_disease_states);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(n_beta_pieces);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(n_beta_pieces);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(n_beta_pieces);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(T);
    
    dims__.push_back(n_disease_states);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((T + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((T + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((T + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((T + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((T + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((T + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((T + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((T + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(T);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(T);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(T);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(T);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((T + 1));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(T);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((T - 7));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((deaths_length + 7));
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(calls_111_length);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.push_back(std::string() + "initial_state_raw" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= (n_beta_pieces + 1); ++sym1__) {
      {
        param_names__.push_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    param_names__.push_back(std::string() + "dL");
    param_names__.push_back(std::string() + "dI");
    param_names__.push_back(std::string() + "dT");
    param_names__.push_back(std::string() + "omega");
    param_names__.push_back(std::string() + "reciprocal_phi_deaths");
    param_names__.push_back(std::string() + "reciprocal_phi_calls_111");
    for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
      {
        param_names__.push_back(std::string() + "rho_calls_111" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= (max_lag + 1); ++sym1__) {
      {
        param_names__.push_back(std::string() + "lag_weights_calls_111" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= n_disease_states; ++sym1__) {
        {
          param_names__.push_back(std::string() + "initial_state" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        {
          param_names__.push_back(std::string() + "beta_left" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        {
          param_names__.push_back(std::string() + "beta_right" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        {
          param_names__.push_back(std::string() + "grad_beta" + '.' + std::to_string(sym1__));
        }}
      param_names__.push_back(std::string() + "nu");
      param_names__.push_back(std::string() + "gamma");
      param_names__.push_back(std::string() + "kappa");
      param_names__.push_back(std::string() + "phi_deaths");
      param_names__.push_back(std::string() + "phi_calls_111");
      for (size_t sym1__ = 1; sym1__ <= n_disease_states; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.push_back(std::string() + "state_estimate" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "S" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "E1" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "E2" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "I1" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "I2" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "T1" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "T2" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "D" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.push_back(std::string() + "daily_infections" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.push_back(std::string() + "daily_deaths" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.push_back(std::string() + "calls_111_lagged_daily_infections" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.push_back(std::string() + "daily_calls_111" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "I" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.push_back(std::string() + "effective_reproduction_number" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T - 7); ++sym1__) {
        {
          param_names__.push_back(std::string() + "growth_rate" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (deaths_length + 7); ++sym1__) {
        {
          param_names__.push_back(std::string() + "pred_deaths" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= calls_111_length; ++sym1__) {
        {
          param_names__.push_back(std::string() + "pred_calls_111" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.push_back(std::string() + "initial_state_raw" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= (n_beta_pieces + 1); ++sym1__) {
      {
        param_names__.push_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    param_names__.push_back(std::string() + "dL");
    param_names__.push_back(std::string() + "dI");
    param_names__.push_back(std::string() + "dT");
    param_names__.push_back(std::string() + "omega");
    param_names__.push_back(std::string() + "reciprocal_phi_deaths");
    param_names__.push_back(std::string() + "reciprocal_phi_calls_111");
    for (size_t sym1__ = 1; sym1__ <= n_rho_calls_111_pieces; ++sym1__) {
      {
        param_names__.push_back(std::string() + "rho_calls_111" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= ((max_lag + 1) - 1); ++sym1__) {
      {
        param_names__.push_back(std::string() + "lag_weights_calls_111" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= n_disease_states; ++sym1__) {
        {
          param_names__.push_back(std::string() + "initial_state" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        {
          param_names__.push_back(std::string() + "beta_left" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        {
          param_names__.push_back(std::string() + "beta_right" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= n_beta_pieces; ++sym1__) {
        {
          param_names__.push_back(std::string() + "grad_beta" + '.' + std::to_string(sym1__));
        }}
      param_names__.push_back(std::string() + "nu");
      param_names__.push_back(std::string() + "gamma");
      param_names__.push_back(std::string() + "kappa");
      param_names__.push_back(std::string() + "phi_deaths");
      param_names__.push_back(std::string() + "phi_calls_111");
      for (size_t sym1__ = 1; sym1__ <= n_disease_states; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.push_back(std::string() + "state_estimate" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "S" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "E1" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "E2" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "I1" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "I2" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "T1" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "T2" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "D" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.push_back(std::string() + "daily_infections" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.push_back(std::string() + "daily_deaths" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.push_back(std::string() + "calls_111_lagged_daily_infections" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.push_back(std::string() + "daily_calls_111" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (size_t sym1__ = 1; sym1__ <= (T + 1); ++sym1__) {
        {
          param_names__.push_back(std::string() + "I" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.push_back(std::string() + "effective_reproduction_number" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (T - 7); ++sym1__) {
        {
          param_names__.push_back(std::string() + "growth_rate" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= (deaths_length + 7); ++sym1__) {
        {
          param_names__.push_back(std::string() + "pred_deaths" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= calls_111_length; ++sym1__) {
        {
          param_names__.push_back(std::string() + "pred_calls_111" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"initial_state_raw\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << (n_beta_pieces + 1) << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"dL\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dI\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dT\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"reciprocal_phi_deaths\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"reciprocal_phi_calls_111\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_calls_111\",\"type\":{\"name\":\"array\",\"length\":" << n_rho_calls_111_pieces << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lag_weights_calls_111\",\"type\":{\"name\":\"vector\",\"length\":" << (max_lag + 1) << "},\"block\":\"parameters\"},{\"name\":\"initial_state\",\"type\":{\"name\":\"array\",\"length\":" << n_disease_states << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_left\",\"type\":{\"name\":\"array\",\"length\":" << n_beta_pieces << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_right\",\"type\":{\"name\":\"array\",\"length\":" << n_beta_pieces << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"grad_beta\",\"type\":{\"name\":\"array\",\"length\":" << n_beta_pieces << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi_deaths\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi_calls_111\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"state_estimate\",\"type\":{\"name\":\"array\",\"length\":" << T << ",\"element_type\":{\"name\":\"array\",\"length\":" << n_disease_states << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"S\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"E1\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"E2\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"I1\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"I2\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"T1\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"T2\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"daily_infections\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"daily_deaths\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"calls_111_lagged_daily_infections\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"daily_calls_111\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"I\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"generated_quantities\"},{\"name\":\"effective_reproduction_number\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"generated_quantities\"},{\"name\":\"growth_rate\",\"type\":{\"name\":\"vector\",\"length\":" << (T - 7) << "},\"block\":\"generated_quantities\"},{\"name\":\"pred_deaths\",\"type\":{\"name\":\"array\",\"length\":" << (deaths_length + 7) << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"pred_calls_111\",\"type\":{\"name\":\"array\",\"length\":" << calls_111_length << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"initial_state_raw\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << (n_beta_pieces + 1) << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"dL\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dI\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dT\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"reciprocal_phi_deaths\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"reciprocal_phi_calls_111\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_calls_111\",\"type\":{\"name\":\"array\",\"length\":" << n_rho_calls_111_pieces << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lag_weights_calls_111\",\"type\":{\"name\":\"vector\",\"length\":" << ((max_lag + 1) - 1) << "},\"block\":\"parameters\"},{\"name\":\"initial_state\",\"type\":{\"name\":\"array\",\"length\":" << n_disease_states << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_left\",\"type\":{\"name\":\"array\",\"length\":" << n_beta_pieces << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_right\",\"type\":{\"name\":\"array\",\"length\":" << n_beta_pieces << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"grad_beta\",\"type\":{\"name\":\"array\",\"length\":" << n_beta_pieces << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi_deaths\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi_calls_111\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"state_estimate\",\"type\":{\"name\":\"array\",\"length\":" << T << ",\"element_type\":{\"name\":\"array\",\"length\":" << n_disease_states << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"S\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"E1\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"E2\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"I1\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"I2\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"T1\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"T2\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"daily_infections\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"daily_deaths\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"calls_111_lagged_daily_infections\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"daily_calls_111\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"I\",\"type\":{\"name\":\"vector\",\"length\":" << (T + 1) << "},\"block\":\"generated_quantities\"},{\"name\":\"effective_reproduction_number\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"generated_quantities\"},{\"name\":\"growth_rate\",\"type\":{\"name\":\"vector\",\"length\":" << (T - 7) << "},\"block\":\"generated_quantities\"},{\"name\":\"pred_deaths\",\"type\":{\"name\":\"array\",\"length\":" << (deaths_length + 7) << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"pred_calls_111\",\"type\":{\"name\":\"array\",\"length\":" << calls_111_length << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef model_01_model_namespace::model_01_model stan_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


